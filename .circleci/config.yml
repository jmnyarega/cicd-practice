version: 2.1

orbs:
  welcome: circleci/welcome-orb@0.4.1

defaults: &defaults
  docker:
    - image: circleci/node:latest

commands:
  print_file_and_worflow_id:
    description: "This commans prints file contents & workflowsId"
    parameters:
      filename:
        type: string
        default: "cf.pem"
      pipeline_id:
        type: string
        default: $CIRCLE_WORKFLOW_ID

    steps:
      - run: cat << parameters.filename >>
      - run: echo << parameters.pipeline_id >>

  destroy_infra:
    steps:
      - run:
          name: destroy infrastructure
          # when: on_fail
          command: aws cloudformation delete-stack --stack-name kc-${CIRCLE_WORKFLOW_ID:0:5}

jobs:
  test_env_vars:
    <<: *defaults
    steps:
      - checkout
      - run: curl https://kvdb.io/6SRssvQPQ9yfGrcxuL7xTr/cf.pem > cf.pem
      - persist_to_workspace:
          root: .
          paths:
            - cf.pem

  print_output_file:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - print_file_and_worflow_id

  test:
    <<: *defaults
    steps:
      - checkout
      - run: npm install && npm run test
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .

  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run: npm run build

  analyze:
    <<: *defaults
    steps:
      - checkout
      - run: npm audit
      - run:
          name: Analyze
          command: echo "This is a security risk, notify the engineering team"
          when: on_fail

  configure_infra:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingureprints:
            - "03:d9:56:83:f5:02:fc:de:e8:56:56:36:20:60:fc:58"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install tar utility
          command: |
            apk add --update tar gzip
      - run:
          name: Install deps
          command: |
            apk add --update --no-cache ansible
      - attach_workspace:
          at: .
      - run: ls -la
      - run: ls ~/.ssh
      - run: cat inventory.txt
      - run: echo ${AWS_SSH}
      - run: cat cf.pem
      - run:
          name: Configure server
          command: |
            chmod 400 cf.pem &&
            ansible-playbook -i inventory.txt ansible/main.yml --key-file cf.pem

  create_infra: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file infra/template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region ${AWS_DEFAULT_REGION}
      - run:
          name: Get the IP
          command: |
            echo [ubuntu] > inventory.txt &&
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt && cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - inventory.txt
      - destroy_infra

  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: simulate error
          command: return 1
      - destroy_infra

workflows:
  udacity:
    jobs:
      # - test
      - test_env_vars
      - print_output_file:
          requires:
            - test_env_vars
      # - build:
      #     requires:
      #       - test
      - create_infra
      - configure_infra:
          requires:
            - print_output_file
            - create_infra
      - smoke_test:
          requires:
            - configure_infra
